# macros.conf

####### Utilities #####
[overlayday]
description = Overlay yesterdays count over today
definition = timechart count | addinfo | eval marker = if(_time < info_max_time - 86400, "yesterday", "today") | eval _time = (if(marker = "yesterday", _time + 86400, _time)) | chart median(count) by _time, marker

####### Overview Gauges #####
[account_management_range_values]
description = Radial gauge values
definition = 0 100 500 3000

[login_failure_range_values]
description = Radial gauge values
definition = 0 20 50 1000

[audit_event_range_values]
description = Radial gauge values
definition = 0 5 50 1000

[network_attack_range_values]
description = Radial gauge values
definition = 0 100 500 5000

[malware_event_range_values]
description = Radial gauge values
definition = 0 100 500 5000

[installed_updates_range_values]
description = Radial gauge values
definition = 0 50000

[vulnerability_scan_range_values]
description = Radial gauge values
definition = 0 100 500 5000

####### Summary Index Generation #####
[sg_account_management]
description = Summary generation for account management events
definition = `account_management` | sistats count by _time, user, src_user, src, dest, signature

[sg_logins]
description = Summary generation for authentication events
definition = `logins` | sistats count by _time, user, app, src, src_ip, dest, action

[sg_terminated_user_activity]
description = Summary generation for terminated user account activity
definition = `terminated_user_activity` | sistats count by _time, user, src, dest, action

[sg_command_execution]
description = Summary generation for command executions
definition = `command_execution` | sistats count by _time, user, dest, app

[sg_object_access]
description = Summary generation for object accesses
definition = `object_access` | sistats count by _time, user, dest, action, Object_Name

[sg_audit_event]
description = Summary generation for audit stop or clearing events
definition = (`audit_cleared`) OR (`audit_stopped`) OR (`audit_failures`) | sistats count by _time, dest, signature, action

[sg_network_attack]
description = Summary generation for network attack events
definition = `network_attack` | sistats count by _time, src, dest, vendor, severity, category, signature

[sg_proxy_traffic]
description = Summary generation for proxy traffic
definition = `proxy_traffic` | sistats count, sum(bytes_in) as bytes_in, sum(bytes_out) as bytes_out by _time, dvc, user, src, dest, action, http_method

[sg_firewall_traffic]
description = Summary generation for firewall traffic
definition = `firewall_traffic` | sistats count, sum(bytes_in) as bytes_in, sum(bytes_out) as bytes_out by _time, dvc, user, src, dest, action, service

[sg_malware_event]
description = Summary generation for malware events
definition = `malware_event` | sistats count by _time, user, product, signature, action_taken, process

[sg_installed_updates]
description = Summary generation for software updates
definition = `installed_updates` | sistats count by _time, dest, vendor, package, package_title

[sg_vulnerability_scan]
description = Summary generation for vulnerability scans
definition = `vulnerability_scan` | sistats count by _time, dvc_type, dest, dest_ip, dest_port, dest_port_proto, os, severity, signature

####### Summary Index Searches #####
[ss_account_management(1)]
args = filter
description = Summary search for account management events
definition = index=fisma_account_summary search_name="FISMA_SG_account_management" $filter$ `account_management_filter` | lookup account_mapping user
#definition = index=fisma_summary search_name="AC2 - All Account Management - Summary Gen" $filter$ `account_management_filter` | lookup account_mapping user

[ss_account_management]
description = Summary search for account management events
definition = `ss_account_management("")`

[ss_account_lockouts]
description = Summary search for account lockouts
definition = `ss_account_management("signature=*locked*")`

[ss_terminated_user_activity]
description = Summary search for terminated user account activity
definition = index=fisma_access_summary search_name="FISMA_SG_terminated_user_activity"

[ss_logins(1)]
args = filter
description = Summary search for authentication events
definition = index=fisma_access_summary search_name="FISMA_SG_logins" $filter$ `login_filter` | lookup account_mapping user
#definition = index=fisma_summary search_name="AC3 - All Authentication - Summary Gen" $filter$ `login_filter` | lookup account_mapping user

[ss_logins]
description = Summary search for authentication events
definition = `ss_logins("")`

[ss_command_execution(1)]
args = filter
description = Summary search for command executions
definition = index=fisma_access_summary search_name="FISMA_SG_command_execution" $filer$ `command_execution_filter` | lookup account_mapping user

[ss_command_execution]
description = Summary search for command executions
definition = `ss_command_execution("")`

[ss_object_access(1)]
args = filter
description = Summary search for object accesses
definition = index=fisma_access_summary search_name="FISMA_SG_object_access" $filter$ `object_access_filter` | lookup account_mapping user

[ss_object_access]
description = Summary search for object accesses
definition = `ss_object_access("")`

[ss_audit_event(1)]
args = filter
description = Summary search for audit stop or clearing events
definition = index=fisma_audit_summary search_name="FISMA_SG_audit_event" $filter$ `audit_event_filter`

[ss_audit_event]
description = Summary search for audit stop or clearing events
definition = `ss_audit_event("")`

[ss_network_attack(1)]
args = filter
description = Summary search for network attack events
definition = index=fisma_network_summary search_name="FISMA_SG_network_attack" $filter$ `network_attack_filter`

[ss_network_attack]
description = Summary search for network attack events
definition = `ss_network_attack("")`

[ss_proxy_traffic(1)]
args = filter
description = Summary search for proxy traffic
definition = index=fisma_network_summary search_name="FISMA_SG_proxy_traffic" $filter$ `proxy_traffic_filter`

[ss_proxy_traffic]
description = Summary search for proxy traffic
definition = `ss_proxy_traffic("")`

[ss_firewall_traffic(1)]
args = filter
description = Summary search for firewall traffic
definition = index=fisma_network_summary search_name="FISMA_SG_firewall_traffic" $filter$ `firewall_traffic_filter`

[ss_firewall_traffic]
description = Summary search for firewall traffic
definition = `ss_firewall_traffic("")`

[ss_malware_event(1)]
args = filter
description = Summary search for malware events
definition = index=fisma_endpoint_summary search_name="FISMA_SG_malware_event" $filter$ `malware_event_filter`

[ss_malware_event]
description = Summary search for malware events
definition = `ss_malware_event("")`

[ss_installed_updates(1)]
args = filter
description = Summary search for software updates
definition = index=fisma_endpoint_summary search_name="FISMA_SG_installed_updates" $filter$ `installed_updates_filter`

[ss_installed_updates]
description = Summary search for software updates
definition = `ss_installed_updates("")`

[ss_vulnerability_scan(1)]
args = filter
description = Summary search for vulnerability scans
definition = index=fisma_endpoint_summary search_name="FISMA_SG_vulnerability_scan" $filter$ `vulnerability_scan_filter`

[ss_vulnerability_scan]
description = Summary search for vulnerability scans
definition = `ss_vulnerability_scan("")`

####### Standard Searches #####

####### AC-2 Account Management #####
[account_management(1)]
args = filter
definition = tag=account (tag=management OR tag=lock OR tag=unlock) $filter$ `account_management_filter` | lookup account_mapping user | fillnull value=unknown signature, src, src_nt_domain, src_user, dest, dest_nt_domain, user, account_type, organization

[account_management]
definition = `account_management("")`

[account_management_filter]
definition = ""

[terminated_user_activity]
definition = tag::user=terminated | fillnull value=unknown user, src_user, src, dest, signature

####### AC-3 Access Enforcement #######
[logins(1)]
args = filter
definition = tag=authentication user=* $filter$ `login_filter` | lookup account_mapping user | fillnull value=unknown user, app, src, src_ip, dest, action, account_type, organization

[logins]
definition = `logins("")`

[login_filter]
definition = ""

[command_execution(1)]
args = filter
definition = tag=process tag=execute user=* $filter$ `command_execution_filter` | lookup account_mapping user | fillnull value=unknown user, app, dest, account_type, organization | search NOT account_type=system

[command_execution]
definition = `command_execution("tag=start")`

[command_execution_filter]
definition = ""

[privileged_app_lookup]
definition = lookup privileged_commands app | search is_privileged=true

[object_access(1)]
args = filter
definition = tag=resource tag=access user=* $filter$ `object_access_filter` | lookup account_mapping user | fillnull value=unknown user, dest, action, Object_Name, account_type, organization

[object_access]
definition = `object_access("tag=start")`

[object_access_filter]
definition = ""

[object_access_denied]
definition = `object_access("tag=start action=failure")`

####### AC-4 Information Flow Enforcement #######
[network_attack(1)]
args = filter
definition = tag=network OR tag=wireless tag=ids tag=attack $filter$ `network_attack_filter` | eval dest=coalesce(dest, DST) | eval src=coalesce(SRC, src) | fillnull value=unknown src, dest, vendor, severity, category, signature

[network_attack]
definition = `network_attack("")`

[network_attack_filter]
definition = ""

[proxy_traffic(1)]
args = filter
definition = tag=web tag=proxy $filter$ `proxy_traffic_filter` | eval dvc=coalesce(dvc, host) | fillnull value=unknown user, src, dest, action, http_method

[proxy_traffic]
definition = `proxy_traffic("")`

[proxy_traffic_filter]
definition = ""

[firewall_traffic(1)]
args = filter
definition = tag=network tag=firewall tag=communicate $filter$ `firewall_traffic_filter` | eval dvc=coalesce(dvc, host) | fillnull value=unknown user, src, dest, action, service

[firewall_traffic]
definition = `firewall_traffic("")`

[firewall_traffic_filter]
definition = ""

####### AC-5 Separation Of Duties #######
[multiple_account_logins]
definition = `logins("action=success NOT dest=localhost")` | `multiple_account_logins_stats`

[multiple_account_logins_stats]
definition = search action=success NOT dest=localhost | stats values(user) as users values(dest) as dests values(account_type) as account_types by src | where mvcount(users) > 1

####### AC-7 Unsuccessful Login Attempts #######
[account_lockout(1)]
args = filter
definition = tag=account tag=lock $filter$ `account_lockout_filter`

[account_lockout]
definition = `account_lockout("")`

[account_lockout_filter]
definition = ""

[consecutive_login_failures]
definition = `logins("action=*")` | stats list(action) as actions by user, src, dest | eval actions = mvjoin(actions, " ") | eval alert = if(match(actions, "(?:failure\s?){3,}"), "True", "False") | where alert = "True"

####### AC-10 Concurrent Session Control #######
[user_sessions]
definition = `logins("action=success NOT dest=localhost")` | stats count as sessions by user, dest, account_type | sort -sessions | where sessions > 1

####### AC-11 Session Lock #######
[session_lock(1)]
args = filter
definition = tag=authentication tag=lock $filter$ `session_lock_filter` | lookup account_mapping user

[session_lock]
definition = `session_lock("")`

[session_lock_filter]
definition = ""

[session_unlock(1)]
args = filter
definition = tag=authentication tag=unlock $filter$ `session_unlock_filter` | lookup account_mapping user

[session_unlock]
definition = `session_unlock("")`

[session_unlock_filter]
definition = ""

####### AC-17 Remote Access #######
[remote_access]
definition = `logins("src_ip=* NOT src_ip=192.168.* NOT src_ip=172.* NOT src_ip=10.* NOT src_ip=127.0.0.1 NOT src_ip=unknown")`

[remote_addresses]
definition = src_ip=* NOT src_ip=192.168.* NOT src_ip=172.* NOT src_ip=10.* NOT src_ip=127.0.0.1 NOT src_ip=unknown

####### AC-18 Wireless Access #######
[wireless_event(1)]
args = filter
definition = tag=wireless tag=ids $filter$ `wireless_event_filter` | eval dest=coalesce(dest, DST) | eval src=coalesce(SRC, src) | fillnull value=unknown src, dest, vendor, severity, signature

[wireless_event]
definition = `wireless_event("")`

[wireless_event_filter]
definition = ""

####### AC-19 Access Control For Mobile Devices #######
[device_access(1)]
args = filter
definition = tag=peripheral tag=communicate tag=connect $filter$ `device_access_filter`

[device_access]
definition = `device_access("")`

[device_access_filter]
definition = ""

####### AU-2 Auditable Events #######
[data_sources]
definition=| metadata type=sources | convert ctime(firstTime) | convert ctime(lastTime) | convert ctime(recentTime)

# Used by the summary search only
[audit_event_filter]
definition = ""

####### AU-4 Audit Storage Capacity #######
[audit_write_failures(1)]
args = filter
definition= tag=audit tag=access tag=write action=failure $filter$ `audit_write_failures_filter`

[audit_write_failures]
definition = `audit_write_failures("")`

[audit_write_failures_filter]
definition = ""

[low_disk_threshold]
definition = PercentFreeSpace<5 AND FreeMBytes<2000

[low_disk_space(1)]
args = filter
definition = tag=disk tag=report `low_disk_threshold` $filter$ `low_disk_space_filter` | eval volume=coalesce(mount, instance, Name) | dedup host, volume | table host, volume, FreeMBytes, PercentFreeSpace  

[low_disk_space]
definition = `low_disk_space("")`

[low_disk_space_filter]
definition = ""

####### AU-5 Response To Audit Processing Failures #######
[audit_failures(1)]
args = filter
definition= tag=audit action=failure $filter$ `audit_failures_filter`

[audit_failures]
definition = `audit_failures("")`

[audit_failures_filter]
definition = ""

####### AU-8 Time Stamps #######
# The action field doesn't exist, so I'll try to create it for the sake of [hopeful] consistency
[network_time(1)]
args = filter
definition = tag=time tag=synchronize $filter$ `network_time_filter` | eval action = coalesce(action, mvfilter(match('tag::eventtype', "success|failure")))

[network_time]
definition = `network_time("")`

[network_time_filter]
definition = ""

[network_time_failures]
definition = `network_time("tag=failure")`

####### AU-9 Protection Of Audit Information #######
[audit_cleared(1)]
args = filter
definition = tag=audit tag=cleared $filter$ `audit_cleared_filter`

[audit_cleared]
definition = `audit_cleared("")`

[audit_cleared_filter]
definition = ""

[audit_stopped(1)]
args = filter
definition = tag=audit tag=stopped $filter$ `audit_stopped_filter`

[audit_stopped]
definition = `audit_stopped("")`

[audit_stopped_filter]
definition = ""

####### CA-2 Security Assessments #######
[vulnerability_scan(1)]
args = filter
definition = tag=vulnerability tag=report $filter$ `vulnerability_scan_filter` | fillnull value=unknown dvc_type, dest, dest_ip, dest_port, dest_port_proto, os, severity, signature

[vulnerability_scan]
definition = `vulnerability_scan("")`

[vulnerability_scan_filter]
definition = ""

####### CM-2 Baseline Configuration #######
[installed_apps(1)]
args = filter
definition = tag=application tag=report NOT tag=update NOT tag=config $filter$ `installed_apps_filter` | eval dest = coalesce(dest, host) | fillnull value=unknown dest, Publisher, DisplayName, DisplayVersion, InstallLocation

[installed_apps]
definition = `installed_apps("")`

[installed_apps_filter]
definition = ""

[installed_updates(1)]
args = filter
definition = tag=system OR tag=application tag=update $filter$ `installed_updates_filter` | eval package = coalesce(package, Message, signature) | fillnull value=unknown dest, vendor, package, package_title

[installed_updates]
definition = `installed_updates("")`

[installed_updates_filter]
definition = ""

####### CM-6 Configuration Settings #######
[configuration_event(1)]
args = filter
definition = tag=configuration OR tag=config OR tag=policy NOT tag=report $filter$ `configuration_event_filter` | eval signature = coalesce(signature, msg, message, Message) | eval dest = coalesce(dest, dvc, host) | lookup account_mapping user | fillnull value=unknown dest, action, user, severity, signature, vendor, account_type, organization

[configuration_event]
definition = `configuration_event("")`

[configuration_event_filter]
definition = ""

####### CM-7 Least Functionality #######
[listening_ports(1)]
args = filter
definition = tag=port tag=listening tag=report $filter$ `listening_ports_filter` | fillnull value=unknown dvc_type, os, dest_port, dest_port_proto, dest_port_state, transport, app, app_version

[listening_ports]
definition = `listening_ports("")`

[listening_ports_filter]
definition = ""

####### CP-9 Information System Backup #######
[backup_event(1)]
args = filter
definition = tag=backup $filter$ `backup_event_filter` | fillnull value=unknown dest, action, user, signature, vendor, account_type, organization

[backup_event]
definition = `backup_event("")`

[backup_event_filter]
definition = ""

####### SI-3 Malicious Code Protection #######
[malware_event(1)]
args = filter
definition = tag=endpoint tag=malware tag=attack $filter$ `malware_event_filter` | lookup account_mapping user | fillnull value=unknown user, product, signature, action_taken, process, account_type, organization

[malware_event]
definition = `malware_event("")`

[malware_event_filter]
definition = ""

[antivirus_updates(1)]
args = filter
definition = tag=endpoint tag=version tag=signature tag=update signature_version=* $filter$ `antivirus_updates_filter`

[antivirus_updates]
definition = `antivirus_updates("")`

[antivirus_updates_filter]
definition = ""
